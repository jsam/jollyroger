// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#ifndef PROTOBUF_INCLUDED_transport_2eproto
#define PROTOBUF_INCLUDED_transport_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_transport_2eproto 

namespace protobuf_transport_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_transport_2eproto
namespace jrtransport {
class InfoHash;
class InfoHashDefaultTypeInternal;
extern InfoHashDefaultTypeInternal _InfoHash_default_instance_;
class PingRequest;
class PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PongResponse;
class PongResponseDefaultTypeInternal;
extern PongResponseDefaultTypeInternal _PongResponse_default_instance_;
}  // namespace jrtransport
namespace google {
namespace protobuf {
template<> ::jrtransport::InfoHash* Arena::CreateMaybeMessage<::jrtransport::InfoHash>(Arena*);
template<> ::jrtransport::PingRequest* Arena::CreateMaybeMessage<::jrtransport::PingRequest>(Arena*);
template<> ::jrtransport::PongResponse* Arena::CreateMaybeMessage<::jrtransport::PongResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace jrtransport {

// ===================================================================

class InfoHash : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jrtransport.InfoHash) */ {
 public:
  InfoHash();
  virtual ~InfoHash();

  InfoHash(const InfoHash& from);

  inline InfoHash& operator=(const InfoHash& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoHash(InfoHash&& from) noexcept
    : InfoHash() {
    *this = ::std::move(from);
  }

  inline InfoHash& operator=(InfoHash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoHash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoHash* internal_default_instance() {
    return reinterpret_cast<const InfoHash*>(
               &_InfoHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InfoHash* other);
  friend void swap(InfoHash& a, InfoHash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoHash* New() const final {
    return CreateMaybeMessage<InfoHash>(NULL);
  }

  InfoHash* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoHash>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoHash& from);
  void MergeFrom(const InfoHash& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoHash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string Address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string Port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  #if LANG_CXX11
  void set_port(::std::string&& value);
  #endif
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // string kBucketSize = 4;
  void clear_kbucketsize();
  static const int kKBucketSizeFieldNumber = 4;
  const ::std::string& kbucketsize() const;
  void set_kbucketsize(const ::std::string& value);
  #if LANG_CXX11
  void set_kbucketsize(::std::string&& value);
  #endif
  void set_kbucketsize(const char* value);
  void set_kbucketsize(const char* value, size_t size);
  ::std::string* mutable_kbucketsize();
  ::std::string* release_kbucketsize();
  void set_allocated_kbucketsize(::std::string* kbucketsize);

  // @@protoc_insertion_point(class_scope:jrtransport.InfoHash)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  ::google::protobuf::internal::ArenaStringPtr kbucketsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jrtransport.PingRequest) */ {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PingRequest* other);
  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const final {
    return CreateMaybeMessage<PingRequest>(NULL);
  }

  PingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .jrtransport.InfoHash source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  private:
  const ::jrtransport::InfoHash& _internal_source() const;
  public:
  const ::jrtransport::InfoHash& source() const;
  ::jrtransport::InfoHash* release_source();
  ::jrtransport::InfoHash* mutable_source();
  void set_allocated_source(::jrtransport::InfoHash* source);

  // @@protoc_insertion_point(class_scope:jrtransport.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::jrtransport::InfoHash* source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PongResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jrtransport.PongResponse) */ {
 public:
  PongResponse();
  virtual ~PongResponse();

  PongResponse(const PongResponse& from);

  inline PongResponse& operator=(const PongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PongResponse(PongResponse&& from) noexcept
    : PongResponse() {
    *this = ::std::move(from);
  }

  inline PongResponse& operator=(PongResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PongResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PongResponse* internal_default_instance() {
    return reinterpret_cast<const PongResponse*>(
               &_PongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PongResponse* other);
  friend void swap(PongResponse& a, PongResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PongResponse* New() const final {
    return CreateMaybeMessage<PongResponse>(NULL);
  }

  PongResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PongResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PongResponse& from);
  void MergeFrom(const PongResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .jrtransport.InfoHash destination = 1;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 1;
  private:
  const ::jrtransport::InfoHash& _internal_destination() const;
  public:
  const ::jrtransport::InfoHash& destination() const;
  ::jrtransport::InfoHash* release_destination();
  ::jrtransport::InfoHash* mutable_destination();
  void set_allocated_destination(::jrtransport::InfoHash* destination);

  // @@protoc_insertion_point(class_scope:jrtransport.PongResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::jrtransport::InfoHash* destination_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InfoHash

// string ID = 1;
inline void InfoHash::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoHash::id() const {
  // @@protoc_insertion_point(field_get:jrtransport.InfoHash.ID)
  return id_.GetNoArena();
}
inline void InfoHash::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jrtransport.InfoHash.ID)
}
#if LANG_CXX11
inline void InfoHash::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jrtransport.InfoHash.ID)
}
#endif
inline void InfoHash::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jrtransport.InfoHash.ID)
}
inline void InfoHash::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jrtransport.InfoHash.ID)
}
inline ::std::string* InfoHash::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:jrtransport.InfoHash.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoHash::release_id() {
  // @@protoc_insertion_point(field_release:jrtransport.InfoHash.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoHash::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jrtransport.InfoHash.ID)
}

// string Address = 2;
inline void InfoHash::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoHash::address() const {
  // @@protoc_insertion_point(field_get:jrtransport.InfoHash.Address)
  return address_.GetNoArena();
}
inline void InfoHash::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jrtransport.InfoHash.Address)
}
#if LANG_CXX11
inline void InfoHash::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jrtransport.InfoHash.Address)
}
#endif
inline void InfoHash::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jrtransport.InfoHash.Address)
}
inline void InfoHash::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jrtransport.InfoHash.Address)
}
inline ::std::string* InfoHash::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:jrtransport.InfoHash.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoHash::release_address() {
  // @@protoc_insertion_point(field_release:jrtransport.InfoHash.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoHash::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:jrtransport.InfoHash.Address)
}

// string Port = 3;
inline void InfoHash::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoHash::port() const {
  // @@protoc_insertion_point(field_get:jrtransport.InfoHash.Port)
  return port_.GetNoArena();
}
inline void InfoHash::set_port(const ::std::string& value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jrtransport.InfoHash.Port)
}
#if LANG_CXX11
inline void InfoHash::set_port(::std::string&& value) {
  
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jrtransport.InfoHash.Port)
}
#endif
inline void InfoHash::set_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jrtransport.InfoHash.Port)
}
inline void InfoHash::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jrtransport.InfoHash.Port)
}
inline ::std::string* InfoHash::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:jrtransport.InfoHash.Port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoHash::release_port() {
  // @@protoc_insertion_point(field_release:jrtransport.InfoHash.Port)
  
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoHash::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:jrtransport.InfoHash.Port)
}

// string kBucketSize = 4;
inline void InfoHash::clear_kbucketsize() {
  kbucketsize_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoHash::kbucketsize() const {
  // @@protoc_insertion_point(field_get:jrtransport.InfoHash.kBucketSize)
  return kbucketsize_.GetNoArena();
}
inline void InfoHash::set_kbucketsize(const ::std::string& value) {
  
  kbucketsize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jrtransport.InfoHash.kBucketSize)
}
#if LANG_CXX11
inline void InfoHash::set_kbucketsize(::std::string&& value) {
  
  kbucketsize_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jrtransport.InfoHash.kBucketSize)
}
#endif
inline void InfoHash::set_kbucketsize(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kbucketsize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jrtransport.InfoHash.kBucketSize)
}
inline void InfoHash::set_kbucketsize(const char* value, size_t size) {
  
  kbucketsize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jrtransport.InfoHash.kBucketSize)
}
inline ::std::string* InfoHash::mutable_kbucketsize() {
  
  // @@protoc_insertion_point(field_mutable:jrtransport.InfoHash.kBucketSize)
  return kbucketsize_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoHash::release_kbucketsize() {
  // @@protoc_insertion_point(field_release:jrtransport.InfoHash.kBucketSize)
  
  return kbucketsize_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoHash::set_allocated_kbucketsize(::std::string* kbucketsize) {
  if (kbucketsize != NULL) {
    
  } else {
    
  }
  kbucketsize_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kbucketsize);
  // @@protoc_insertion_point(field_set_allocated:jrtransport.InfoHash.kBucketSize)
}

// -------------------------------------------------------------------

// PingRequest

// .jrtransport.InfoHash source = 1;
inline bool PingRequest::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void PingRequest::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
inline const ::jrtransport::InfoHash& PingRequest::_internal_source() const {
  return *source_;
}
inline const ::jrtransport::InfoHash& PingRequest::source() const {
  const ::jrtransport::InfoHash* p = source_;
  // @@protoc_insertion_point(field_get:jrtransport.PingRequest.source)
  return p != NULL ? *p : *reinterpret_cast<const ::jrtransport::InfoHash*>(
      &::jrtransport::_InfoHash_default_instance_);
}
inline ::jrtransport::InfoHash* PingRequest::release_source() {
  // @@protoc_insertion_point(field_release:jrtransport.PingRequest.source)
  
  ::jrtransport::InfoHash* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::jrtransport::InfoHash* PingRequest::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::jrtransport::InfoHash>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:jrtransport.PingRequest.source)
  return source_;
}
inline void PingRequest::set_allocated_source(::jrtransport::InfoHash* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:jrtransport.PingRequest.source)
}

// -------------------------------------------------------------------

// PongResponse

// .jrtransport.InfoHash destination = 1;
inline bool PongResponse::has_destination() const {
  return this != internal_default_instance() && destination_ != NULL;
}
inline void PongResponse::clear_destination() {
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) {
    delete destination_;
  }
  destination_ = NULL;
}
inline const ::jrtransport::InfoHash& PongResponse::_internal_destination() const {
  return *destination_;
}
inline const ::jrtransport::InfoHash& PongResponse::destination() const {
  const ::jrtransport::InfoHash* p = destination_;
  // @@protoc_insertion_point(field_get:jrtransport.PongResponse.destination)
  return p != NULL ? *p : *reinterpret_cast<const ::jrtransport::InfoHash*>(
      &::jrtransport::_InfoHash_default_instance_);
}
inline ::jrtransport::InfoHash* PongResponse::release_destination() {
  // @@protoc_insertion_point(field_release:jrtransport.PongResponse.destination)
  
  ::jrtransport::InfoHash* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline ::jrtransport::InfoHash* PongResponse::mutable_destination() {
  
  if (destination_ == NULL) {
    auto* p = CreateMaybeMessage<::jrtransport::InfoHash>(GetArenaNoVirtual());
    destination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:jrtransport.PongResponse.destination)
  return destination_;
}
inline void PongResponse::set_allocated_destination(::jrtransport::InfoHash* destination) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destination_;
  }
  if (destination) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:jrtransport.PongResponse.destination)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jrtransport

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_transport_2eproto
