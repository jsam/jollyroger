// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#ifndef PROTOBUF_INCLUDED_transport_2eproto
#define PROTOBUF_INCLUDED_transport_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_transport_2eproto 

namespace protobuf_transport_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_transport_2eproto
namespace jrtransport {
class AuthRequest;
class AuthRequestDefaultTypeInternal;
extern AuthRequestDefaultTypeInternal _AuthRequest_default_instance_;
class AuthResponse;
class AuthResponseDefaultTypeInternal;
extern AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
class ID;
class IDDefaultTypeInternal;
extern IDDefaultTypeInternal _ID_default_instance_;
class PingRequest;
class PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PongResponse;
class PongResponseDefaultTypeInternal;
extern PongResponseDefaultTypeInternal _PongResponse_default_instance_;
}  // namespace jrtransport
namespace google {
namespace protobuf {
template<> ::jrtransport::AuthRequest* Arena::CreateMaybeMessage<::jrtransport::AuthRequest>(Arena*);
template<> ::jrtransport::AuthResponse* Arena::CreateMaybeMessage<::jrtransport::AuthResponse>(Arena*);
template<> ::jrtransport::ID* Arena::CreateMaybeMessage<::jrtransport::ID>(Arena*);
template<> ::jrtransport::PingRequest* Arena::CreateMaybeMessage<::jrtransport::PingRequest>(Arena*);
template<> ::jrtransport::PongResponse* Arena::CreateMaybeMessage<::jrtransport::PongResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace jrtransport {

// ===================================================================

class ID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jrtransport.ID) */ {
 public:
  ID();
  virtual ~ID();

  ID(const ID& from);

  inline ID& operator=(const ID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ID(ID&& from) noexcept
    : ID() {
    *this = ::std::move(from);
  }

  inline ID& operator=(ID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ID* internal_default_instance() {
    return reinterpret_cast<const ID*>(
               &_ID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ID* other);
  friend void swap(ID& a, ID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ID* New() const final {
    return CreateMaybeMessage<ID>(NULL);
  }

  ID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ID& from);
  void MergeFrom(const ID& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string InfoHash = 1;
  void clear_infohash();
  static const int kInfoHashFieldNumber = 1;
  const ::std::string& infohash() const;
  void set_infohash(const ::std::string& value);
  #if LANG_CXX11
  void set_infohash(::std::string&& value);
  #endif
  void set_infohash(const char* value);
  void set_infohash(const char* value, size_t size);
  ::std::string* mutable_infohash();
  ::std::string* release_infohash();
  void set_allocated_infohash(::std::string* infohash);

  // string Address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string Port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  #if LANG_CXX11
  void set_port(::std::string&& value);
  #endif
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:jrtransport.ID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr infohash_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jrtransport.PingRequest) */ {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PingRequest* other);
  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const final {
    return CreateMaybeMessage<PingRequest>(NULL);
  }

  PingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .jrtransport.ID source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  private:
  const ::jrtransport::ID& _internal_source() const;
  public:
  const ::jrtransport::ID& source() const;
  ::jrtransport::ID* release_source();
  ::jrtransport::ID* mutable_source();
  void set_allocated_source(::jrtransport::ID* source);

  // @@protoc_insertion_point(class_scope:jrtransport.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::jrtransport::ID* source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PongResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jrtransport.PongResponse) */ {
 public:
  PongResponse();
  virtual ~PongResponse();

  PongResponse(const PongResponse& from);

  inline PongResponse& operator=(const PongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PongResponse(PongResponse&& from) noexcept
    : PongResponse() {
    *this = ::std::move(from);
  }

  inline PongResponse& operator=(PongResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PongResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PongResponse* internal_default_instance() {
    return reinterpret_cast<const PongResponse*>(
               &_PongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PongResponse* other);
  friend void swap(PongResponse& a, PongResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PongResponse* New() const final {
    return CreateMaybeMessage<PongResponse>(NULL);
  }

  PongResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PongResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PongResponse& from);
  void MergeFrom(const PongResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .jrtransport.ID destination = 1;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 1;
  private:
  const ::jrtransport::ID& _internal_destination() const;
  public:
  const ::jrtransport::ID& destination() const;
  ::jrtransport::ID* release_destination();
  ::jrtransport::ID* mutable_destination();
  void set_allocated_destination(::jrtransport::ID* destination);

  // @@protoc_insertion_point(class_scope:jrtransport.PongResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::jrtransport::ID* destination_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jrtransport.AuthRequest) */ {
 public:
  AuthRequest();
  virtual ~AuthRequest();

  AuthRequest(const AuthRequest& from);

  inline AuthRequest& operator=(const AuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthRequest(AuthRequest&& from) noexcept
    : AuthRequest() {
    *this = ::std::move(from);
  }

  inline AuthRequest& operator=(AuthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRequest*>(
               &_AuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AuthRequest* other);
  friend void swap(AuthRequest& a, AuthRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthRequest* New() const final {
    return CreateMaybeMessage<AuthRequest>(NULL);
  }

  AuthRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthRequest& from);
  void MergeFrom(const AuthRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string secret = 2;
  void clear_secret();
  static const int kSecretFieldNumber = 2;
  const ::std::string& secret() const;
  void set_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_secret(::std::string&& value);
  #endif
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  ::std::string* mutable_secret();
  ::std::string* release_secret();
  void set_allocated_secret(::std::string* secret);

  // .jrtransport.ID source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  private:
  const ::jrtransport::ID& _internal_source() const;
  public:
  const ::jrtransport::ID& source() const;
  ::jrtransport::ID* release_source();
  ::jrtransport::ID* mutable_source();
  void set_allocated_source(::jrtransport::ID* source);

  // @@protoc_insertion_point(class_scope:jrtransport.AuthRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr secret_;
  ::jrtransport::ID* source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jrtransport.AuthResponse) */ {
 public:
  AuthResponse();
  virtual ~AuthResponse();

  AuthResponse(const AuthResponse& from);

  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthResponse(AuthResponse&& from) noexcept
    : AuthResponse() {
    *this = ::std::move(from);
  }

  inline AuthResponse& operator=(AuthResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthResponse* internal_default_instance() {
    return reinterpret_cast<const AuthResponse*>(
               &_AuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AuthResponse* other);
  friend void swap(AuthResponse& a, AuthResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthResponse* New() const final {
    return CreateMaybeMessage<AuthResponse>(NULL);
  }

  AuthResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthResponse& from);
  void MergeFrom(const AuthResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .jrtransport.ID destination = 1;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 1;
  private:
  const ::jrtransport::ID& _internal_destination() const;
  public:
  const ::jrtransport::ID& destination() const;
  ::jrtransport::ID* release_destination();
  ::jrtransport::ID* mutable_destination();
  void set_allocated_destination(::jrtransport::ID* destination);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:jrtransport.AuthResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::jrtransport::ID* destination_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ID

// string InfoHash = 1;
inline void ID::clear_infohash() {
  infohash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ID::infohash() const {
  // @@protoc_insertion_point(field_get:jrtransport.ID.InfoHash)
  return infohash_.GetNoArena();
}
inline void ID::set_infohash(const ::std::string& value) {
  
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jrtransport.ID.InfoHash)
}
#if LANG_CXX11
inline void ID::set_infohash(::std::string&& value) {
  
  infohash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jrtransport.ID.InfoHash)
}
#endif
inline void ID::set_infohash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jrtransport.ID.InfoHash)
}
inline void ID::set_infohash(const char* value, size_t size) {
  
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jrtransport.ID.InfoHash)
}
inline ::std::string* ID::mutable_infohash() {
  
  // @@protoc_insertion_point(field_mutable:jrtransport.ID.InfoHash)
  return infohash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ID::release_infohash() {
  // @@protoc_insertion_point(field_release:jrtransport.ID.InfoHash)
  
  return infohash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ID::set_allocated_infohash(::std::string* infohash) {
  if (infohash != NULL) {
    
  } else {
    
  }
  infohash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infohash);
  // @@protoc_insertion_point(field_set_allocated:jrtransport.ID.InfoHash)
}

// string Address = 2;
inline void ID::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ID::address() const {
  // @@protoc_insertion_point(field_get:jrtransport.ID.Address)
  return address_.GetNoArena();
}
inline void ID::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jrtransport.ID.Address)
}
#if LANG_CXX11
inline void ID::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jrtransport.ID.Address)
}
#endif
inline void ID::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jrtransport.ID.Address)
}
inline void ID::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jrtransport.ID.Address)
}
inline ::std::string* ID::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:jrtransport.ID.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ID::release_address() {
  // @@protoc_insertion_point(field_release:jrtransport.ID.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ID::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:jrtransport.ID.Address)
}

// string Port = 3;
inline void ID::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ID::port() const {
  // @@protoc_insertion_point(field_get:jrtransport.ID.Port)
  return port_.GetNoArena();
}
inline void ID::set_port(const ::std::string& value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jrtransport.ID.Port)
}
#if LANG_CXX11
inline void ID::set_port(::std::string&& value) {
  
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jrtransport.ID.Port)
}
#endif
inline void ID::set_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jrtransport.ID.Port)
}
inline void ID::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jrtransport.ID.Port)
}
inline ::std::string* ID::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:jrtransport.ID.Port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ID::release_port() {
  // @@protoc_insertion_point(field_release:jrtransport.ID.Port)
  
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ID::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:jrtransport.ID.Port)
}

// -------------------------------------------------------------------

// PingRequest

// .jrtransport.ID source = 1;
inline bool PingRequest::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void PingRequest::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
inline const ::jrtransport::ID& PingRequest::_internal_source() const {
  return *source_;
}
inline const ::jrtransport::ID& PingRequest::source() const {
  const ::jrtransport::ID* p = source_;
  // @@protoc_insertion_point(field_get:jrtransport.PingRequest.source)
  return p != NULL ? *p : *reinterpret_cast<const ::jrtransport::ID*>(
      &::jrtransport::_ID_default_instance_);
}
inline ::jrtransport::ID* PingRequest::release_source() {
  // @@protoc_insertion_point(field_release:jrtransport.PingRequest.source)
  
  ::jrtransport::ID* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::jrtransport::ID* PingRequest::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::jrtransport::ID>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:jrtransport.PingRequest.source)
  return source_;
}
inline void PingRequest::set_allocated_source(::jrtransport::ID* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:jrtransport.PingRequest.source)
}

// -------------------------------------------------------------------

// PongResponse

// .jrtransport.ID destination = 1;
inline bool PongResponse::has_destination() const {
  return this != internal_default_instance() && destination_ != NULL;
}
inline void PongResponse::clear_destination() {
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) {
    delete destination_;
  }
  destination_ = NULL;
}
inline const ::jrtransport::ID& PongResponse::_internal_destination() const {
  return *destination_;
}
inline const ::jrtransport::ID& PongResponse::destination() const {
  const ::jrtransport::ID* p = destination_;
  // @@protoc_insertion_point(field_get:jrtransport.PongResponse.destination)
  return p != NULL ? *p : *reinterpret_cast<const ::jrtransport::ID*>(
      &::jrtransport::_ID_default_instance_);
}
inline ::jrtransport::ID* PongResponse::release_destination() {
  // @@protoc_insertion_point(field_release:jrtransport.PongResponse.destination)
  
  ::jrtransport::ID* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline ::jrtransport::ID* PongResponse::mutable_destination() {
  
  if (destination_ == NULL) {
    auto* p = CreateMaybeMessage<::jrtransport::ID>(GetArenaNoVirtual());
    destination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:jrtransport.PongResponse.destination)
  return destination_;
}
inline void PongResponse::set_allocated_destination(::jrtransport::ID* destination) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destination_;
  }
  if (destination) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:jrtransport.PongResponse.destination)
}

// -------------------------------------------------------------------

// AuthRequest

// .jrtransport.ID source = 1;
inline bool AuthRequest::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void AuthRequest::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
inline const ::jrtransport::ID& AuthRequest::_internal_source() const {
  return *source_;
}
inline const ::jrtransport::ID& AuthRequest::source() const {
  const ::jrtransport::ID* p = source_;
  // @@protoc_insertion_point(field_get:jrtransport.AuthRequest.source)
  return p != NULL ? *p : *reinterpret_cast<const ::jrtransport::ID*>(
      &::jrtransport::_ID_default_instance_);
}
inline ::jrtransport::ID* AuthRequest::release_source() {
  // @@protoc_insertion_point(field_release:jrtransport.AuthRequest.source)
  
  ::jrtransport::ID* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::jrtransport::ID* AuthRequest::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::jrtransport::ID>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:jrtransport.AuthRequest.source)
  return source_;
}
inline void AuthRequest::set_allocated_source(::jrtransport::ID* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:jrtransport.AuthRequest.source)
}

// string secret = 2;
inline void AuthRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthRequest::secret() const {
  // @@protoc_insertion_point(field_get:jrtransport.AuthRequest.secret)
  return secret_.GetNoArena();
}
inline void AuthRequest::set_secret(const ::std::string& value) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jrtransport.AuthRequest.secret)
}
#if LANG_CXX11
inline void AuthRequest::set_secret(::std::string&& value) {
  
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jrtransport.AuthRequest.secret)
}
#endif
inline void AuthRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jrtransport.AuthRequest.secret)
}
inline void AuthRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jrtransport.AuthRequest.secret)
}
inline ::std::string* AuthRequest::mutable_secret() {
  
  // @@protoc_insertion_point(field_mutable:jrtransport.AuthRequest.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_secret() {
  // @@protoc_insertion_point(field_release:jrtransport.AuthRequest.secret)
  
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:jrtransport.AuthRequest.secret)
}

// -------------------------------------------------------------------

// AuthResponse

// .jrtransport.ID destination = 1;
inline bool AuthResponse::has_destination() const {
  return this != internal_default_instance() && destination_ != NULL;
}
inline void AuthResponse::clear_destination() {
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) {
    delete destination_;
  }
  destination_ = NULL;
}
inline const ::jrtransport::ID& AuthResponse::_internal_destination() const {
  return *destination_;
}
inline const ::jrtransport::ID& AuthResponse::destination() const {
  const ::jrtransport::ID* p = destination_;
  // @@protoc_insertion_point(field_get:jrtransport.AuthResponse.destination)
  return p != NULL ? *p : *reinterpret_cast<const ::jrtransport::ID*>(
      &::jrtransport::_ID_default_instance_);
}
inline ::jrtransport::ID* AuthResponse::release_destination() {
  // @@protoc_insertion_point(field_release:jrtransport.AuthResponse.destination)
  
  ::jrtransport::ID* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline ::jrtransport::ID* AuthResponse::mutable_destination() {
  
  if (destination_ == NULL) {
    auto* p = CreateMaybeMessage<::jrtransport::ID>(GetArenaNoVirtual());
    destination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:jrtransport.AuthResponse.destination)
  return destination_;
}
inline void AuthResponse::set_allocated_destination(::jrtransport::ID* destination) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destination_;
  }
  if (destination) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:jrtransport.AuthResponse.destination)
}

// bool success = 2;
inline void AuthResponse::clear_success() {
  success_ = false;
}
inline bool AuthResponse::success() const {
  // @@protoc_insertion_point(field_get:jrtransport.AuthResponse.success)
  return success_;
}
inline void AuthResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:jrtransport.AuthResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jrtransport

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_transport_2eproto
