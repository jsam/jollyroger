// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transport.proto
#ifndef GRPC_transport_2eproto__INCLUDED
#define GRPC_transport_2eproto__INCLUDED

#include "transport.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace jrtransport {

// The JRTransport service definition.
class JRTransportService final {
 public:
  static constexpr char const* service_full_name() {
    return "jrtransport.JRTransportService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::jrtransport::PingRequest& request, ::jrtransport::PongResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::PongResponse>> AsyncPing(::grpc::ClientContext* context, const ::jrtransport::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::PongResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::PongResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::jrtransport::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::PongResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status Auth(::grpc::ClientContext* context, const ::jrtransport::AuthRequest& request, ::jrtransport::AuthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::AuthResponse>> AsyncAuth(::grpc::ClientContext* context, const ::jrtransport::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::AuthResponse>>(AsyncAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::AuthResponse>> PrepareAsyncAuth(::grpc::ClientContext* context, const ::jrtransport::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::AuthResponse>>(PrepareAsyncAuthRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::PongResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::jrtransport::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::PongResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::jrtransport::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::AuthResponse>* AsyncAuthRaw(::grpc::ClientContext* context, const ::jrtransport::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::jrtransport::AuthResponse>* PrepareAsyncAuthRaw(::grpc::ClientContext* context, const ::jrtransport::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::jrtransport::PingRequest& request, ::jrtransport::PongResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jrtransport::PongResponse>> AsyncPing(::grpc::ClientContext* context, const ::jrtransport::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jrtransport::PongResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jrtransport::PongResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::jrtransport::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jrtransport::PongResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status Auth(::grpc::ClientContext* context, const ::jrtransport::AuthRequest& request, ::jrtransport::AuthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jrtransport::AuthResponse>> AsyncAuth(::grpc::ClientContext* context, const ::jrtransport::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jrtransport::AuthResponse>>(AsyncAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jrtransport::AuthResponse>> PrepareAsyncAuth(::grpc::ClientContext* context, const ::jrtransport::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::jrtransport::AuthResponse>>(PrepareAsyncAuthRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::jrtransport::PongResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::jrtransport::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jrtransport::PongResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::jrtransport::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jrtransport::AuthResponse>* AsyncAuthRaw(::grpc::ClientContext* context, const ::jrtransport::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::jrtransport::AuthResponse>* PrepareAsyncAuthRaw(::grpc::ClientContext* context, const ::jrtransport::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_Auth_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::jrtransport::PingRequest* request, ::jrtransport::PongResponse* response);
    virtual ::grpc::Status Auth(::grpc::ServerContext* context, const ::jrtransport::AuthRequest* request, ::jrtransport::AuthResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::jrtransport::PingRequest* request, ::jrtransport::PongResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::jrtransport::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::jrtransport::PongResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Auth() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auth(::grpc::ServerContext* context, const ::jrtransport::AuthRequest* request, ::jrtransport::AuthResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuth(::grpc::ServerContext* context, ::jrtransport::AuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::jrtransport::AuthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_Auth<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::jrtransport::PingRequest* request, ::jrtransport::PongResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Auth() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auth(::grpc::ServerContext* context, const ::jrtransport::AuthRequest* request, ::jrtransport::AuthResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::jrtransport::PingRequest, ::jrtransport::PongResponse>(std::bind(&WithStreamedUnaryMethod_Ping<BaseClass>::StreamedPing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::jrtransport::PingRequest* request, ::jrtransport::PongResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jrtransport::PingRequest,::jrtransport::PongResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Auth() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::jrtransport::AuthRequest, ::jrtransport::AuthResponse>(std::bind(&WithStreamedUnaryMethod_Auth<BaseClass>::StreamedAuth, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Auth(::grpc::ServerContext* context, const ::jrtransport::AuthRequest* request, ::jrtransport::AuthResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::jrtransport::AuthRequest,::jrtransport::AuthResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_Auth<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_Auth<Service > > StreamedService;
};

}  // namespace jrtransport


#endif  // GRPC_transport_2eproto__INCLUDED
